// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: movimiento.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMovimiento = `-- name: CreateMovimiento :one
INSERT INTO Movimiento ( id_usuario, monto, tipo, descripcion, fecha_movimiento )
            VALUES ( $1, $2, $3, $4 , $5 )
RETURNING id_movimiento, id_usuario, monto, tipo, descripcion, fecha_movimiento
`

type CreateMovimientoParams struct {
	IDUsuario       int32          `json:"id_usuario"`
	Monto           float64        `json:"monto"`
	Tipo            string         `json:"tipo"`
	Descripcion     sql.NullString `json:"descripcion"`
	FechaMovimiento time.Time      `json:"fecha_movimiento"`
}

func (q *Queries) CreateMovimiento(ctx context.Context, arg CreateMovimientoParams) (Movimiento, error) {
	row := q.db.QueryRowContext(ctx, createMovimiento,
		arg.IDUsuario,
		arg.Monto,
		arg.Tipo,
		arg.Descripcion,
		arg.FechaMovimiento,
	)
	var i Movimiento
	err := row.Scan(
		&i.IDMovimiento,
		&i.IDUsuario,
		&i.Monto,
		&i.Tipo,
		&i.Descripcion,
		&i.FechaMovimiento,
	)
	return i, err
}

const deleteMovimiento = `-- name: DeleteMovimiento :exec
DELETE FROM Movimiento WHERE id_movimiento = $1
`

func (q *Queries) DeleteMovimiento(ctx context.Context, idMovimiento int32) error {
	_, err := q.db.ExecContext(ctx, deleteMovimiento, idMovimiento)
	return err
}

const getMovimiento = `-- name: GetMovimiento :one
SELECT id_movimiento, id_usuario, monto, tipo, descripcion, fecha_movimiento FROM Movimiento WHERE id_movimiento = $1
`

func (q *Queries) GetMovimiento(ctx context.Context, idMovimiento int32) (Movimiento, error) {
	row := q.db.QueryRowContext(ctx, getMovimiento, idMovimiento)
	var i Movimiento
	err := row.Scan(
		&i.IDMovimiento,
		&i.IDUsuario,
		&i.Monto,
		&i.Tipo,
		&i.Descripcion,
		&i.FechaMovimiento,
	)
	return i, err
}

const listMovimiento = `-- name: ListMovimiento :many
SELECT id_movimiento, id_usuario, monto, tipo, descripcion, fecha_movimiento FROM Movimiento WHERE id_usuario = $1 ORDER BY fecha_movimiento DESC
`

func (q *Queries) ListMovimiento(ctx context.Context, idUsuario int32) ([]Movimiento, error) {
	rows, err := q.db.QueryContext(ctx, listMovimiento, idUsuario)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movimiento
	for rows.Next() {
		var i Movimiento
		if err := rows.Scan(
			&i.IDMovimiento,
			&i.IDUsuario,
			&i.Monto,
			&i.Tipo,
			&i.Descripcion,
			&i.FechaMovimiento,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMovimientoAll = `-- name: ListMovimientoAll :many
SELECT id_movimiento, id_usuario, monto, tipo, descripcion, fecha_movimiento FROM Movimiento ORDER BY fecha_movimiento ASC
`

func (q *Queries) ListMovimientoAll(ctx context.Context) ([]Movimiento, error) {
	rows, err := q.db.QueryContext(ctx, listMovimientoAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movimiento
	for rows.Next() {
		var i Movimiento
		if err := rows.Scan(
			&i.IDMovimiento,
			&i.IDUsuario,
			&i.Monto,
			&i.Tipo,
			&i.Descripcion,
			&i.FechaMovimiento,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovimiento = `-- name: UpdateMovimiento :one
UPDATE Movimiento SET monto = $2, tipo = $3, descripcion = $4, fecha_movimiento = $5 WHERE id_movimiento = $1
RETURNING id_movimiento, id_usuario, monto, tipo, descripcion, fecha_movimiento
`

type UpdateMovimientoParams struct {
	IDMovimiento    int32          `json:"id_movimiento"`
	Monto           float64        `json:"monto"`
	Tipo            string         `json:"tipo"`
	Descripcion     sql.NullString `json:"descripcion"`
	FechaMovimiento time.Time      `json:"fecha_movimiento"`
}

func (q *Queries) UpdateMovimiento(ctx context.Context, arg UpdateMovimientoParams) (Movimiento, error) {
	row := q.db.QueryRowContext(ctx, updateMovimiento,
		arg.IDMovimiento,
		arg.Monto,
		arg.Tipo,
		arg.Descripcion,
		arg.FechaMovimiento,
	)
	var i Movimiento
	err := row.Scan(
		&i.IDMovimiento,
		&i.IDUsuario,
		&i.Monto,
		&i.Tipo,
		&i.Descripcion,
		&i.FechaMovimiento,
	)
	return i, err
}
